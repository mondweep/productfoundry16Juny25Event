import mongoose from 'mongoose';\nimport { logger } from '../utils/logger';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/live_conditions';\nconst DB_NAME = process.env.DB_NAME || 'live_conditions';\n\n// MongoDB connection options\nconst mongooseOptions = {\n  maxPoolSize: 10, // Maintain up to 10 socket connections\n  serverSelectionTimeoutMS: 5000, // Keep trying to send operations for 5 seconds\n  socketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity\n  bufferMaxEntries: 0, // Disable mongoose buffering\n  bufferCommands: false, // Disable mongoose buffering\n};\n\n// Connection state management\nlet isConnected = false;\n\nexport const connectDatabase = async (): Promise<void> => {\n  if (isConnected) {\n    logger.info('Already connected to database');\n    return;\n  }\n\n  try {\n    // Connect to MongoDB\n    await mongoose.connect(MONGODB_URI, mongooseOptions);\n    isConnected = true;\n    \n    logger.info(`Connected to MongoDB: ${DB_NAME}`);\n    \n    // Connection event handlers\n    mongoose.connection.on('error', (error) => {\n      logger.error('MongoDB connection error:', error);\n      isConnected = false;\n    });\n    \n    mongoose.connection.on('disconnected', () => {\n      logger.warn('MongoDB disconnected');\n      isConnected = false;\n    });\n    \n    mongoose.connection.on('reconnected', () => {\n      logger.info('MongoDB reconnected');\n      isConnected = true;\n    });\n    \n  } catch (error) {\n    logger.error('Failed to connect to MongoDB:', error);\n    throw error;\n  }\n};\n\nexport const disconnectDatabase = async (): Promise<void> => {\n  if (!isConnected) {\n    return;\n  }\n  \n  try {\n    await mongoose.disconnect();\n    isConnected = false;\n    logger.info('Disconnected from MongoDB');\n  } catch (error) {\n    logger.error('Error disconnecting from MongoDB:', error);\n    throw error;\n  }\n};\n\nexport const getConnectionStatus = (): boolean => {\n  return isConnected && mongoose.connection.readyState === 1;\n};\n\n// Database health check\nexport const checkDatabaseHealth = async (): Promise<{ status: string; details: any }> => {\n  try {\n    const adminDb = mongoose.connection.db.admin();\n    const result = await adminDb.ping();\n    \n    return {\n      status: 'healthy',\n      details: {\n        connected: isConnected,\n        readyState: mongoose.connection.readyState,\n        host: mongoose.connection.host,\n        port: mongoose.connection.port,\n        name: mongoose.connection.name,\n        ping: result\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      details: {\n        connected: isConnected,\n        readyState: mongoose.connection.readyState,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    };\n  }\n};\n\n// Graceful shutdown\nexport const gracefulShutdown = async (): Promise<void> => {\n  logger.info('Starting graceful database shutdown');\n  \n  try {\n    await mongoose.connection.close();\n    logger.info('Database connection closed');\n  } catch (error) {\n    logger.error('Error during database shutdown:', error);\n  }\n};\n\n// Handle process termination\nprocess.on('SIGINT', gracefulShutdown);\nprocess.on('SIGTERM', gracefulShutdown);\nprocess.on('SIGUSR2', gracefulShutdown); // For nodemon\n\nexport default {\n  connect: connectDatabase,\n  disconnect: disconnectDatabase,\n  getStatus: getConnectionStatus,\n  healthCheck: checkDatabaseHealth,\n  gracefulShutdown,\n};"