import winston from 'winston';\nimport path from 'path';\n\nconst logLevel = process.env.LOG_LEVEL || 'info';\nconst logFile = process.env.LOG_FILE || './logs/app.log';\n\n// Create logs directory if it doesn't exist\nconst fs = require('fs');\nconst logDir = path.dirname(logFile);\nif (!fs.existsSync(logDir)) {\n  fs.mkdirSync(logDir, { recursive: true });\n}\n\n// Custom format for console output\nconst consoleFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.colorize({ all: true }),\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\n    let log = `${timestamp} [${level}]: ${message}`;\n    \n    // Add meta information if present\n    if (Object.keys(meta).length > 0) {\n      log += `\\n${JSON.stringify(meta, null, 2)}`;\n    }\n    \n    return log;\n  })\n);\n\n// Custom format for file output\nconst fileFormat = winston.format.combine(\n  winston.format.timestamp(),\n  winston.format.errors({ stack: true }),\n  winston.format.json()\n);\n\n// Create transports\nconst transports: winston.transport[] = [\n  // Console transport\n  new winston.transports.Console({\n    level: logLevel,\n    format: consoleFormat,\n    silent: process.env.NODE_ENV === 'test',\n  }),\n];\n\n// Add file transport in non-test environments\nif (process.env.NODE_ENV !== 'test') {\n  transports.push(\n    // Combined log file\n    new winston.transports.File({\n      filename: logFile,\n      level: logLevel,\n      format: fileFormat,\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    }),\n    \n    // Error log file\n    new winston.transports.File({\n      filename: path.join(logDir, 'error.log'),\n      level: 'error',\n      format: fileFormat,\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    })\n  );\n}\n\n// Create logger instance\nexport const logger = winston.createLogger({\n  level: logLevel,\n  transports,\n  // Handle uncaught exceptions and unhandled rejections\n  exceptionHandlers: [\n    new winston.transports.File({ filename: path.join(logDir, 'exceptions.log') })\n  ],\n  rejectionHandlers: [\n    new winston.transports.File({ filename: path.join(logDir, 'rejections.log') })\n  ],\n});\n\n// Performance logging utility\nexport const logPerformance = (operation: string, startTime: number, metadata?: any) => {\n  const duration = Date.now() - startTime;\n  logger.info(`Performance: ${operation} completed in ${duration}ms`, {\n    operation,\n    duration,\n    ...metadata,\n  });\n};\n\n// API request logging utility\nexport const logAPIRequest = (method: string, url: string, statusCode: number, duration: number, userId?: string) => {\n  logger.info('API Request', {\n    method,\n    url,\n    statusCode,\n    duration,\n    userId,\n    type: 'api_request',\n  });\n};\n\n// External API call logging\nexport const logExternalAPI = (service: string, endpoint: string, statusCode: number, duration: number, error?: any) => {\n  const logData = {\n    service,\n    endpoint,\n    statusCode,\n    duration,\n    type: 'external_api_call',\n  };\n  \n  if (error) {\n    logger.error(`External API Error: ${service}`, { ...logData, error: error.message });\n  } else {\n    logger.info(`External API Call: ${service}`, logData);\n  }\n};\n\n// Database operation logging\nexport const logDBOperation = (operation: string, collection: string, duration: number, error?: any) => {\n  const logData = {\n    operation,\n    collection,\n    duration,\n    type: 'database_operation',\n  };\n  \n  if (error) {\n    logger.error(`Database Error: ${operation}`, { ...logData, error: error.message });\n  } else {\n    logger.info(`Database Operation: ${operation}`, logData);\n  }\n};\n\nexport default logger;"