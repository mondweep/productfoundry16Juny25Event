import axios from 'axios';\nimport { logger } from '../utils/logger';\nimport { API_ENDPOINTS, CACHE_TTL } from '../config/constants';\nimport { cacheService } from './cache';\nimport { AppError } from '../middleware/errorHandler';\n\n// Weather service interfaces\ninterface WeatherParams {\n  latitude: number;\n  longitude: number;\n  units?: 'metric' | 'imperial';\n  include?: string[];\n}\n\ninterface ForecastParams extends WeatherParams {\n  days: number;\n}\n\ninterface HistoricalParams extends WeatherParams {\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface StationsParams {\n  latitude: number;\n  longitude: number;\n  radius: number;\n}\n\ninterface ImageryParams {\n  latitude: number;\n  longitude: number;\n  type: string;\n  zoom: number;\n}\n\ninterface SearchParams {\n  query: string;\n  limit: number;\n}\n\n// Weather data interfaces\ninterface WeatherCondition {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n}\n\ninterface CurrentWeather {\n  location: {\n    name: string;\n    region: string;\n    country: string;\n    latitude: number;\n    longitude: number;\n    timezone: string;\n    localtime: string;\n  };\n  current: {\n    temperature: number;\n    feelsLike: number;\n    humidity: number;\n    pressure: number;\n    windSpeed: number;\n    windDirection: number;\n    windGust?: number;\n    visibility: number;\n    uvIndex: number;\n    cloudCover: number;\n    dewPoint: number;\n    condition: WeatherCondition;\n    lastUpdated: string;\n  };\n  alerts?: Array<{\n    id: string;\n    title: string;\n    description: string;\n    severity: string;\n    startTime: string;\n    endTime?: string;\n    regions: string[];\n  }>;\n}\n\ninterface WeatherForecast {\n  location: CurrentWeather['location'];\n  current?: CurrentWeather['current'];\n  hourly?: Array<{\n    time: string;\n    temperature: number;\n    condition: WeatherCondition;\n    precipitationProbability: number;\n    precipitation: number;\n    windSpeed: number;\n    windDirection: number;\n    humidity: number;\n    pressure: number;\n    cloudCover: number;\n    uvIndex: number;\n  }>;\n  daily?: Array<{\n    date: string;\n    temperature: {\n      min: number;\n      max: number;\n    };\n    condition: WeatherCondition;\n    precipitationProbability: number;\n    precipitation: number;\n    windSpeed: number;\n    windDirection: number;\n    humidity: number;\n    pressure: number;\n    uvIndex: number;\n    sunrise: string;\n    sunset: string;\n    moonPhase: number;\n  }>;\n}\n\nclass WeatherService {\n  private apiKeys: {\n    openweather?: string;\n    metservice?: string;\n    bom?: string;\n  };\n\n  constructor() {\n    this.apiKeys = {\n      openweather: process.env.OPENWEATHER_API_KEY,\n      metservice: process.env.METSERVICE_NZ_API_KEY,\n      bom: process.env.BOM_AU_API_KEY,\n    };\n  }\n\n  // Get current weather conditions\n  async getCurrentWeather(params: WeatherParams): Promise<CurrentWeather> {\n    try {\n      logger.info('Fetching current weather:', params);\n      \n      // Determine best API based on location\n      const provider = this.selectWeatherProvider(params.latitude, params.longitude);\n      \n      let weatherData: CurrentWeather;\n      \n      switch (provider) {\n        case 'metservice':\n          weatherData = await this.getMetserviceWeather(params);\n          break;\n        case 'bom':\n          weatherData = await this.getBOMWeather(params);\n          break;\n        default:\n          weatherData = await this.getOpenWeatherMapCurrent(params);\n      }\n      \n      logger.info('Weather data fetched successfully:', {\n        provider,\n        location: weatherData.location.name,\n        temperature: weatherData.current.temperature,\n      });\n      \n      return weatherData;\n    } catch (error: any) {\n      logger.error('Error fetching current weather:', {\n        error: error.message,\n        params,\n      });\n      throw new AppError(\n        'Failed to fetch weather data',\n        500,\n        true,\n        'WEATHER_FETCH_ERROR',\n        { originalError: error.message }\n      );\n    }\n  }\n\n  // Get weather forecast\n  async getForecast(params: ForecastParams): Promise<WeatherForecast> {\n    try {\n      logger.info('Fetching weather forecast:', params);\n      \n      const provider = this.selectWeatherProvider(params.latitude, params.longitude);\n      \n      let forecastData: WeatherForecast;\n      \n      switch (provider) {\n        case 'metservice':\n          forecastData = await this.getMetserviceForecast(params);\n          break;\n        case 'bom':\n          forecastData = await this.getBOMForecast(params);\n          break;\n        default:\n          forecastData = await this.getOpenWeatherMapForecast(params);\n      }\n      \n      logger.info('Forecast data fetched successfully:', {\n        provider,\n        location: forecastData.location.name,\n        days: params.days,\n      });\n      \n      return forecastData;\n    } catch (error: any) {\n      logger.error('Error fetching weather forecast:', {\n        error: error.message,\n        params,\n      });\n      throw new AppError(\n        'Failed to fetch forecast data',\n        500,\n        true,\n        'FORECAST_FETCH_ERROR',\n        { originalError: error.message }\n      );\n    }\n  }\n\n  // Get historical weather data\n  async getHistoricalWeather(params: HistoricalParams): Promise<any> {\n    try {\n      logger.info('Fetching historical weather:', params);\n      \n      // For now, use OpenWeatherMap's historical API\n      const historicalData = await this.getOpenWeatherMapHistorical(params);\n      \n      logger.info('Historical weather data fetched successfully:', {\n        location: `${params.latitude},${params.longitude}`,\n        period: `${params.startDate.toISOString()} - ${params.endDate.toISOString()}`,\n      });\n      \n      return historicalData;\n    } catch (error: any) {\n      logger.error('Error fetching historical weather:', {\n        error: error.message,\n        params,\n      });\n      throw new AppError(\n        'Failed to fetch historical weather data',\n        500,\n        true,\n        'HISTORICAL_WEATHER_FETCH_ERROR',\n        { originalError: error.message }\n      );\n    }\n  }\n\n  // Get weather alerts\n  async getWeatherAlerts(params: { latitude: number; longitude: number }): Promise<any> {\n    try {\n      logger.info('Fetching weather alerts:', params);\n      \n      const provider = this.selectWeatherProvider(params.latitude, params.longitude);\n      \n      let alertsData;\n      \n      switch (provider) {\n        case 'metservice':\n          alertsData = await this.getMetserviceAlerts(params);\n          break;\n        case 'bom':\n          alertsData = await this.getBOMAlerts(params);\n          break;\n        default:\n          alertsData = await this.getOpenWeatherMapAlerts(params);\n      }\n      \n      return alertsData;\n    } catch (error: any) {\n      logger.error('Error fetching weather alerts:', {\n        error: error.message,\n        params,\n      });\n      throw new AppError(\n        'Failed to fetch weather alerts',\n        500,\n        true,\n        'WEATHER_ALERTS_FETCH_ERROR',\n        { originalError: error.message }\n      );\n    }\n  }\n\n  // Get nearby weather stations\n  async getNearbyStations(params: StationsParams): Promise<any> {\n    try {\n      logger.info('Fetching nearby weather stations:', params);\n      \n      // This would fetch from weather station APIs\n      const stations = {\n        stations: [\n          {\n            id: 'station1',\n            name: 'Local Weather Station',\n            latitude: params.latitude + 0.01,\n            longitude: params.longitude + 0.01,\n            distance: 1.2,\n            elevation: 50,\n            type: 'automatic',\n          }\n        ],\n        total: 1,\n      };\n      \n      return stations;\n    } catch (error: any) {\n      logger.error('Error fetching weather stations:', {\n        error: error.message,\n        params,\n      });\n      throw new AppError(\n        'Failed to fetch weather stations',\n        500,\n        true,\n        'WEATHER_STATIONS_FETCH_ERROR',\n        { originalError: error.message }\n      );\n    }\n  }\n\n  // Get weather imagery (radar/satellite)\n  async getWeatherImagery(params: ImageryParams): Promise<any> {\n    try {\n      logger.info('Fetching weather imagery:', params);\n      \n      // This would fetch radar/satellite imagery\n      const imagery = {\n        type: params.type,\n        location: {\n          latitude: params.latitude,\n          longitude: params.longitude,\n        },\n        zoom: params.zoom,\n        imageUrl: `https://example.com/weather/${params.type}/${params.latitude}/${params.longitude}/${params.zoom}`,\n        timestamp: new Date().toISOString(),\n        expires: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // 10 minutes\n      };\n      \n      return imagery;\n    } catch (error: any) {\n      logger.error('Error fetching weather imagery:', {\n        error: error.message,\n        params,\n      });\n      throw new AppError(\n        'Failed to fetch weather imagery',\n        500,\n        true,\n        'WEATHER_IMAGERY_FETCH_ERROR',\n        { originalError: error.message }\n      );\n    }\n  }\n\n  // Search locations\n  async searchLocations(params: SearchParams): Promise<any> {\n    try {\n      logger.info('Searching weather locations:', params);\n      \n      // Use OpenWeatherMap geocoding API\n      const url = `http://api.openweathermap.org/geo/1.0/direct`;\n      const response = await axios.get(url, {\n        params: {\n          q: params.query,\n          limit: params.limit,\n          appid: this.apiKeys.openweather,\n        },\n      });\n      \n      const locations = response.data.map((location: any) => ({\n        name: location.name,\n        region: location.state || location.country,\n        country: location.country,\n        latitude: location.lat,\n        longitude: location.lon,\n      }));\n      \n      return {\n        locations,\n        total: locations.length,\n      };\n    } catch (error: any) {\n      logger.error('Error searching weather locations:', {\n        error: error.message,\n        params,\n      });\n      throw new AppError(\n        'Failed to search locations',\n        500,\n        true,\n        'WEATHER_SEARCH_ERROR',\n        { originalError: error.message }\n      );\n    }\n  }\n\n  // Select best weather provider based on location\n  private selectWeatherProvider(latitude: number, longitude: number): string {\n    // New Zealand coordinates\n    if (latitude >= -47 && latitude <= -34 && longitude >= 166 && longitude <= 179) {\n      return this.apiKeys.metservice ? 'metservice' : 'openweather';\n    }\n    \n    // Australia coordinates\n    if (latitude >= -44 && latitude <= -10 && longitude >= 113 && longitude <= 154) {\n      return this.apiKeys.bom ? 'bom' : 'openweather';\n    }\n    \n    // Default to OpenWeatherMap\n    return 'openweather';\n  }\n\n  // OpenWeatherMap implementation\n  private async getOpenWeatherMapCurrent(params: WeatherParams): Promise<CurrentWeather> {\n    if (!this.apiKeys.openweather) {\n      throw new Error('OpenWeatherMap API key not configured');\n    }\n\n    const url = `${API_ENDPOINTS.OPENWEATHER.BASE_URL}${API_ENDPOINTS.OPENWEATHER.WEATHER}`;\n    const response = await axios.get(url, {\n      params: {\n        lat: params.latitude,\n        lon: params.longitude,\n        units: params.units || 'metric',\n        appid: this.apiKeys.openweather,\n      },\n      timeout: 10000,\n    });\n\n    const data = response.data;\n    \n    return {\n      location: {\n        name: data.name,\n        region: data.sys.country,\n        country: data.sys.country,\n        latitude: data.coord.lat,\n        longitude: data.coord.lon,\n        timezone: 'UTC', // OpenWeatherMap doesn't provide timezone\n        localtime: new Date().toISOString(),\n      },\n      current: {\n        temperature: data.main.temp,\n        feelsLike: data.main.feels_like,\n        humidity: data.main.humidity,\n        pressure: data.main.pressure,\n        windSpeed: data.wind?.speed || 0,\n        windDirection: data.wind?.deg || 0,\n        windGust: data.wind?.gust,\n        visibility: data.visibility || 10000,\n        uvIndex: 0, // Not available in current weather\n        cloudCover: data.clouds.all,\n        dewPoint: 0, // Calculate if needed\n        condition: {\n          id: data.weather[0].id,\n          main: data.weather[0].main,\n          description: data.weather[0].description,\n          icon: data.weather[0].icon,\n        },\n        lastUpdated: new Date(data.dt * 1000).toISOString(),\n      },\n    };\n  }\n\n  private async getOpenWeatherMapForecast(params: ForecastParams): Promise<WeatherForecast> {\n    if (!this.apiKeys.openweather) {\n      throw new Error('OpenWeatherMap API key not configured');\n    }\n\n    const url = `${API_ENDPOINTS.OPENWEATHER.BASE_URL}${API_ENDPOINTS.OPENWEATHER.FORECAST}`;\n    const response = await axios.get(url, {\n      params: {\n        lat: params.latitude,\n        lon: params.longitude,\n        units: params.units || 'metric',\n        appid: this.apiKeys.openweather,\n      },\n      timeout: 10000,\n    });\n\n    const data = response.data;\n    \n    // Process forecast data\n    const hourly = data.list.slice(0, params.days * 8).map((item: any) => ({\n      time: new Date(item.dt * 1000).toISOString(),\n      temperature: item.main.temp,\n      condition: {\n        id: item.weather[0].id,\n        main: item.weather[0].main,\n        description: item.weather[0].description,\n        icon: item.weather[0].icon,\n      },\n      precipitationProbability: item.pop * 100,\n      precipitation: item.rain?.['3h'] || item.snow?.['3h'] || 0,\n      windSpeed: item.wind?.speed || 0,\n      windDirection: item.wind?.deg || 0,\n      humidity: item.main.humidity,\n      pressure: item.main.pressure,\n      cloudCover: item.clouds.all,\n      uvIndex: 0,\n    }));\n\n    return {\n      location: {\n        name: data.city.name,\n        region: data.city.country,\n        country: data.city.country,\n        latitude: data.city.coord.lat,\n        longitude: data.city.coord.lon,\n        timezone: 'UTC',\n        localtime: new Date().toISOString(),\n      },\n      hourly,\n    };\n  }\n\n  private async getOpenWeatherMapHistorical(params: HistoricalParams): Promise<any> {\n    // Implement historical weather data fetching\n    return {\n      location: {\n        latitude: params.latitude,\n        longitude: params.longitude,\n      },\n      data: [],\n      message: 'Historical weather data not implemented',\n    };\n  }\n\n  private async getOpenWeatherMapAlerts(params: { latitude: number; longitude: number }): Promise<any> {\n    // Implement weather alerts fetching\n    return {\n      alerts: [],\n      message: 'No active weather alerts',\n    };\n  }\n\n  // Metservice NZ implementation (placeholder)\n  private async getMetserviceWeather(params: WeatherParams): Promise<CurrentWeather> {\n    // Implement MetService API integration\n    throw new Error('MetService integration not implemented');\n  }\n\n  private async getMetserviceForecast(params: ForecastParams): Promise<WeatherForecast> {\n    // Implement MetService forecast integration\n    throw new Error('MetService forecast integration not implemented');\n  }\n\n  private async getMetserviceAlerts(params: { latitude: number; longitude: number }): Promise<any> {\n    // Implement MetService alerts integration\n    throw new Error('MetService alerts integration not implemented');\n  }\n\n  // BOM Australia implementation (placeholder)\n  private async getBOMWeather(params: WeatherParams): Promise<CurrentWeather> {\n    // Implement BOM API integration\n    throw new Error('BOM integration not implemented');\n  }\n\n  private async getBOMForecast(params: ForecastParams): Promise<WeatherForecast> {\n    // Implement BOM forecast integration\n    throw new Error('BOM forecast integration not implemented');\n  }\n\n  private async getBOMAlerts(params: { latitude: number; longitude: number }): Promise<any> {\n    // Implement BOM alerts integration\n    throw new Error('BOM alerts integration not implemented');\n  }\n}\n\n// Create and export weather service instance\nexport const weatherService = new WeatherService();\nexport default weatherService;"