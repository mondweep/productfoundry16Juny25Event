import { Request, Response, NextFunction } from 'express';\nimport Joi from 'joi';\nimport { HTTP_STATUS_CODES } from '../config/constants';\nimport { logger } from '../utils/logger';\n\n// Validation middleware factory\nexport const validate = (schema: Joi.ObjectSchema, property: 'body' | 'query' | 'params' = 'body') => {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    const { error, value } = schema.validate(req[property], {\n      abortEarly: false,\n      allowUnknown: false,\n      stripUnknown: true,\n    });\n\n    if (error) {\n      const errorDetails = error.details.map(detail => ({\n        field: detail.path.join('.'),\n        message: detail.message,\n        type: detail.type,\n        value: detail.context?.value,\n      }));\n\n      logger.warn('Validation error:', {\n        property,\n        path: req.originalUrl,\n        method: req.method,\n        errors: errorDetails,\n      });\n\n      res.status(HTTP_STATUS_CODES.BAD_REQUEST).json({\n        success: false,\n        message: 'Validation failed',\n        code: 'VALIDATION_ERROR',\n        errors: errorDetails,\n      });\n      return;\n    }\n\n    // Replace the original property with the validated and sanitized value\n    req[property] = value;\n    next();\n  };\n};\n\n// Common validation schemas\nexport const commonSchemas = {\n  // Pagination\n  pagination: Joi.object({\n    page: Joi.number().integer().min(1).default(1),\n    limit: Joi.number().integer().min(1).max(100).default(20),\n    sort: Joi.string().valid('createdAt', '-createdAt', 'name', '-name', 'priority', '-priority').default('-createdAt'),\n  }),\n\n  // Coordinates\n  coordinates: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n  }),\n\n  // Location with radius\n  locationWithRadius: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    radius: Joi.number().min(1).max(1000).default(50), // km\n  }),\n\n  // MongoDB ObjectId\n  objectId: Joi.string().pattern(/^[0-9a-fA-F]{24}$/).required(),\n\n  // Email\n  email: Joi.string().email().lowercase().trim().required(),\n\n  // Password\n  password: Joi.string().min(8).max(128).pattern(new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]')).required()\n    .messages({\n      'string.pattern.base': 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character',\n    }),\n\n  // Date range\n  dateRange: Joi.object({\n    startDate: Joi.date().iso().required(),\n    endDate: Joi.date().iso().min(Joi.ref('startDate')).required(),\n  }),\n\n  // Search query\n  search: Joi.object({\n    q: Joi.string().trim().min(1).max(255),\n    filters: Joi.object().unknown(true),\n  }),\n};\n\n// User validation schemas\nexport const userSchemas = {\n  register: Joi.object({\n    email: commonSchemas.email,\n    password: commonSchemas.password,\n    firstName: Joi.string().trim().min(2).max(50).required(),\n    lastName: Joi.string().trim().min(2).max(50).required(),\n    acceptTerms: Joi.boolean().valid(true).required(),\n  }),\n\n  login: Joi.object({\n    email: commonSchemas.email,\n    password: Joi.string().required(),\n    rememberMe: Joi.boolean().default(false),\n  }),\n\n  updateProfile: Joi.object({\n    firstName: Joi.string().trim().min(2).max(50),\n    lastName: Joi.string().trim().min(2).max(50),\n    preferences: Joi.object({\n      defaultLocation: Joi.object({\n        latitude: Joi.number().min(-90).max(90),\n        longitude: Joi.number().min(-180).max(180),\n        address: Joi.string().trim().max(255),\n        region: Joi.string().trim().max(100),\n      }),\n      units: Joi.object({\n        temperature: Joi.string().valid('celsius', 'fahrenheit').default('celsius'),\n        windSpeed: Joi.string().valid('kmh', 'mph', 'ms', 'knots').default('kmh'),\n        pressure: Joi.string().valid('hPa', 'inHg', 'mmHg').default('hPa'),\n        distance: Joi.string().valid('km', 'miles').default('km'),\n      }),\n      notifications: Joi.object({\n        weatherAlerts: Joi.boolean().default(true),\n        oceanWarnings: Joi.boolean().default(true),\n        trafficIncidents: Joi.boolean().default(false),\n        severityThreshold: Joi.string().valid('low', 'medium', 'high').default('medium'),\n      }),\n      dashboard: Joi.object({\n        defaultView: Joi.string().valid('weather', 'ocean', 'traffic', 'combined').default('combined'),\n        autoRefresh: Joi.boolean().default(true),\n        refreshInterval: Joi.number().min(60000).max(3600000).default(300000), // 1 min to 1 hour\n      }),\n    }),\n  }),\n\n  changePassword: Joi.object({\n    currentPassword: Joi.string().required(),\n    newPassword: commonSchemas.password,\n  }),\n\n  resetPassword: Joi.object({\n    token: Joi.string().required(),\n    newPassword: commonSchemas.password,\n  }),\n\n  forgotPassword: Joi.object({\n    email: commonSchemas.email,\n  }),\n};\n\n// Weather validation schemas\nexport const weatherSchemas = {\n  getCurrentWeather: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    units: Joi.string().valid('metric', 'imperial').default('metric'),\n    include: Joi.array().items(Joi.string().valid('current', 'hourly', 'daily', 'alerts')).default(['current']),\n  }),\n\n  getForecast: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    days: Joi.number().integer().min(1).max(14).default(7),\n    units: Joi.string().valid('metric', 'imperial').default('metric'),\n    include: Joi.array().items(Joi.string().valid('hourly', 'daily', 'alerts')).default(['daily']),\n  }),\n\n  getHistoricalWeather: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    startDate: Joi.date().iso().max('now').required(),\n    endDate: Joi.date().iso().min(Joi.ref('startDate')).max('now').required(),\n    units: Joi.string().valid('metric', 'imperial').default('metric'),\n  }),\n};\n\n// Ocean validation schemas\nexport const oceanSchemas = {\n  getOceanConditions: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    include: Joi.array().items(Joi.string().valid('waves', 'tides', 'water_temp', 'currents', 'surf')).default(['waves', 'tides']),\n  }),\n\n  getSurfForecast: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    days: Joi.number().integer().min(1).max(7).default(3),\n    spots: Joi.array().items(Joi.string()).max(10),\n  }),\n\n  getTideData: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    date: Joi.date().iso().default('now'),\n    days: Joi.number().integer().min(1).max(30).default(7),\n  }),\n};\n\n// Traffic validation schemas\nexport const trafficSchemas = {\n  getTrafficConditions: Joi.object({\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    radius: Joi.number().min(1).max(100).default(10), // km\n    include: Joi.array().items(Joi.string().valid('incidents', 'roadwork', 'closures', 'congestion')).default(['incidents', 'congestion']),\n  }),\n\n  getRoute: Joi.object({\n    origin: Joi.object({\n      latitude: Joi.number().min(-90).max(90).required(),\n      longitude: Joi.number().min(-180).max(180).required(),\n    }).required(),\n    destination: Joi.object({\n      latitude: Joi.number().min(-90).max(90).required(),\n      longitude: Joi.number().min(-180).max(180).required(),\n    }).required(),\n    waypoints: Joi.array().items(Joi.object({\n      latitude: Joi.number().min(-90).max(90).required(),\n      longitude: Joi.number().min(-180).max(180).required(),\n    })).max(10),\n    mode: Joi.string().valid('driving', 'walking', 'cycling', 'transit').default('driving'),\n    avoid: Joi.array().items(Joi.string().valid('tolls', 'highways', 'ferries')),\n  }),\n};\n\n// Alert validation schemas\nexport const alertSchemas = {\n  createAlert: Joi.object({\n    type: Joi.string().valid('weather_warning', 'severe_weather', 'ocean_warning', 'traffic_incident', 'emergency').required(),\n    title: Joi.string().trim().min(5).max(200).required(),\n    description: Joi.string().trim().min(10).max(1000).required(),\n    severity: Joi.string().valid('low', 'medium', 'high', 'critical').required(),\n    location: Joi.object({\n      region: Joi.string().trim().max(100).required(),\n      latitude: Joi.number().min(-90).max(90).required(),\n      longitude: Joi.number().min(-180).max(180).required(),\n      radius: Joi.number().min(1).max(1000).required(),\n    }).required(),\n    conditions: Joi.object().unknown(true),\n    startTime: Joi.date().iso().required(),\n    endTime: Joi.date().iso().min(Joi.ref('startTime')),\n    priority: Joi.number().integer().min(1).max(10).default(5),\n    source: Joi.object({\n      provider: Joi.string().trim().required(),\n      externalId: Joi.string().trim(),\n      url: Joi.string().uri(),\n    }).required(),\n    affectedAreas: Joi.array().items(Joi.string().trim()).min(1).required(),\n  }),\n\n  updateAlert: Joi.object({\n    title: Joi.string().trim().min(5).max(200),\n    description: Joi.string().trim().min(10).max(1000),\n    severity: Joi.string().valid('low', 'medium', 'high', 'critical'),\n    conditions: Joi.object().unknown(true),\n    endTime: Joi.date().iso(),\n    priority: Joi.number().integer().min(1).max(10),\n    isActive: Joi.boolean(),\n  }),\n\n  getAlerts: Joi.object({\n    latitude: Joi.number().min(-90).max(90),\n    longitude: Joi.number().min(-180).max(180),\n    radius: Joi.number().min(1).max(1000).default(50),\n    type: Joi.string().valid('weather_warning', 'severe_weather', 'ocean_warning', 'traffic_incident', 'emergency'),\n    severity: Joi.string().valid('low', 'medium', 'high', 'critical'),\n    isActive: Joi.boolean().default(true),\n    ...commonSchemas.pagination.extract(['page', 'limit', 'sort']),\n  }),\n};\n\n// Favorites validation schemas\nexport const favoritesSchemas = {\n  addLocation: Joi.object({\n    name: Joi.string().trim().min(2).max(100).required(),\n    latitude: Joi.number().min(-90).max(90).required(),\n    longitude: Joi.number().min(-180).max(180).required(),\n    address: Joi.string().trim().max(255).required(),\n    type: Joi.string().valid('weather', 'ocean', 'traffic').required(),\n  }),\n\n  addAlert: Joi.object({\n    type: Joi.string().trim().max(50).required(),\n    location: Joi.string().trim().max(100).required(),\n    conditions: Joi.object().unknown(true).required(),\n  }),\n\n  updateLocation: Joi.object({\n    name: Joi.string().trim().min(2).max(100),\n    type: Joi.string().valid('weather', 'ocean', 'traffic'),\n  }),\n};\n\n// Admin validation schemas\nexport const adminSchemas = {\n  updateUser: Joi.object({\n    firstName: Joi.string().trim().min(2).max(50),\n    lastName: Joi.string().trim().min(2).max(50),\n    role: Joi.string().valid('user', 'premium', 'admin', 'moderator'),\n    isActive: Joi.boolean(),\n    isEmailVerified: Joi.boolean(),\n    subscription: Joi.object({\n      type: Joi.string().valid('free', 'premium', 'pro'),\n      startDate: Joi.date().iso(),\n      endDate: Joi.date().iso().min(Joi.ref('startDate')),\n    }),\n  }),\n\n  createApiKey: Joi.object({\n    name: Joi.string().trim().min(3).max(100).required(),\n    permissions: Joi.array().items(Joi.string()).min(1).required(),\n    rateLimit: Joi.object({\n      requests: Joi.number().integer().min(1).max(1000000).required(),\n      window: Joi.number().integer().min(60).max(86400).required(), // 1 minute to 1 day\n    }),\n  }),\n};\n\nexport default {\n  validate,\n  commonSchemas,\n  userSchemas,\n  weatherSchemas,\n  oceanSchemas,\n  trafficSchemas,\n  alertSchemas,\n  favoritesSchemas,\n  adminSchemas,\n};"