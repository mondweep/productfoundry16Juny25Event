import { Request, Response, NextFunction } from 'express';\nimport { logger } from '../utils/logger';\nimport { HTTP_STATUS_CODES, ERROR_MESSAGES } from '../config/constants';\n\n// API Key configuration\ninterface ApiKeyConfig {\n  key: string;\n  name: string;\n  permissions: string[];\n  rateLimit?: {\n    requests: number;\n    window: number; // in seconds\n  };\n  isActive: boolean;\n}\n\n// In production, these would come from a database or environment variables\nconst API_KEYS: { [key: string]: ApiKeyConfig } = {\n  // Development API key\n  'dev-api-key-123': {\n    key: 'dev-api-key-123',\n    name: 'Development Key',\n    permissions: ['weather:read', 'ocean:read', 'traffic:read', 'alerts:read'],\n    rateLimit: {\n      requests: 1000,\n      window: 3600, // 1 hour\n    },\n    isActive: true,\n  },\n  // Frontend application key\n  'frontend-api-key-456': {\n    key: 'frontend-api-key-456',\n    name: 'Frontend Application',\n    permissions: ['weather:read', 'ocean:read', 'traffic:read', 'alerts:read', 'user:read'],\n    rateLimit: {\n      requests: 10000,\n      window: 3600, // 1 hour\n    },\n    isActive: true,\n  },\n  // Admin API key\n  'admin-api-key-789': {\n    key: 'admin-api-key-789',\n    name: 'Admin Key',\n    permissions: ['*'], // All permissions\n    isActive: true,\n  },\n  // External partner key\n  'partner-api-key-abc': {\n    key: 'partner-api-key-abc',\n    name: 'External Partner',\n    permissions: ['weather:read', 'ocean:read'],\n    rateLimit: {\n      requests: 5000,\n      window: 3600, // 1 hour\n    },\n    isActive: true,\n  },\n};\n\n// Extended Request interface\nexport interface ApiKeyRequest extends Request {\n  apiKey?: ApiKeyConfig;\n  apiKeyPermissions?: string[];\n}\n\n// API key validation middleware\nexport const validateApiKey = (\n  req: ApiKeyRequest,\n  res: Response,\n  next: NextFunction\n): void => {\n  // Skip API key validation for health checks and auth endpoints\n  const skipPaths = ['/health', '/api/v1/auth'];\n  const shouldSkip = skipPaths.some(path => req.path.startsWith(path));\n  \n  if (shouldSkip) {\n    return next();\n  }\n\n  try {\n    // Get API key from header\n    const apiKeyHeader = process.env.API_KEY_HEADER || 'x-api-key';\n    const apiKey = req.headers[apiKeyHeader] as string;\n\n    // For internal/development use, allow requests without API key\n    if (process.env.NODE_ENV === 'development' && !apiKey) {\n      return next();\n    }\n\n    if (!apiKey) {\n      res.status(HTTP_STATUS_CODES.UNAUTHORIZED).json({\n        success: false,\n        message: 'API key required',\n        code: 'API_KEY_MISSING',\n        hint: `Include API key in ${apiKeyHeader} header`,\n      });\n      return;\n    }\n\n    // Validate API key\n    const keyConfig = API_KEYS[apiKey];\n    \n    if (!keyConfig) {\n      logger.warn('Invalid API key attempted:', {\n        apiKey: apiKey.substring(0, 8) + '...',\n        ip: req.ip,\n        path: req.originalUrl,\n        userAgent: req.headers['user-agent'],\n      });\n      \n      res.status(HTTP_STATUS_CODES.UNAUTHORIZED).json({\n        success: false,\n        message: 'Invalid API key',\n        code: 'API_KEY_INVALID',\n      });\n      return;\n    }\n\n    if (!keyConfig.isActive) {\n      res.status(HTTP_STATUS_CODES.UNAUTHORIZED).json({\n        success: false,\n        message: 'API key is deactivated',\n        code: 'API_KEY_DEACTIVATED',\n      });\n      return;\n    }\n\n    // Attach API key info to request\n    req.apiKey = keyConfig;\n    req.apiKeyPermissions = keyConfig.permissions;\n\n    // Log API key usage\n    logger.info('API key validated:', {\n      keyName: keyConfig.name,\n      path: req.originalUrl,\n      method: req.method,\n      ip: req.ip,\n    });\n\n    next();\n  } catch (error) {\n    logger.error('API key validation error:', error);\n    res.status(HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR).json({\n      success: false,\n      message: ERROR_MESSAGES.INTERNAL_ERROR,\n      code: 'API_KEY_VALIDATION_ERROR',\n    });\n  }\n};\n\n// Permission checking middleware\nexport const requirePermission = (permission: string) => {\n  return (req: ApiKeyRequest, res: Response, next: NextFunction): void => {\n    if (!req.apiKeyPermissions) {\n      res.status(HTTP_STATUS_CODES.UNAUTHORIZED).json({\n        success: false,\n        message: 'API key validation required',\n        code: 'API_KEY_NOT_VALIDATED',\n      });\n      return;\n    }\n\n    // Check if API key has wildcard permission\n    if (req.apiKeyPermissions.includes('*')) {\n      return next();\n    }\n\n    // Check specific permission\n    const hasPermission = req.apiKeyPermissions.includes(permission);\n    \n    if (!hasPermission) {\n      logger.warn('Permission denied:', {\n        required: permission,\n        available: req.apiKeyPermissions,\n        keyName: req.apiKey?.name,\n        path: req.originalUrl,\n      });\n      \n      res.status(HTTP_STATUS_CODES.FORBIDDEN).json({\n        success: false,\n        message: 'Insufficient API key permissions',\n        code: 'PERMISSION_DENIED',\n        required: permission,\n        available: req.apiKeyPermissions,\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n// Multiple permissions check (OR logic)\nexport const requireAnyPermission = (permissions: string[]) => {\n  return (req: ApiKeyRequest, res: Response, next: NextFunction): void => {\n    if (!req.apiKeyPermissions) {\n      res.status(HTTP_STATUS_CODES.UNAUTHORIZED).json({\n        success: false,\n        message: 'API key validation required',\n        code: 'API_KEY_NOT_VALIDATED',\n      });\n      return;\n    }\n\n    // Check if API key has wildcard permission\n    if (req.apiKeyPermissions.includes('*')) {\n      return next();\n    }\n\n    // Check if any of the required permissions exist\n    const hasAnyPermission = permissions.some(permission => \n      req.apiKeyPermissions!.includes(permission)\n    );\n    \n    if (!hasAnyPermission) {\n      logger.warn('Permission denied (any):', {\n        required: permissions,\n        available: req.apiKeyPermissions,\n        keyName: req.apiKey?.name,\n        path: req.originalUrl,\n      });\n      \n      res.status(HTTP_STATUS_CODES.FORBIDDEN).json({\n        success: false,\n        message: 'Insufficient API key permissions',\n        code: 'PERMISSION_DENIED',\n        required: permissions,\n        available: req.apiKeyPermissions,\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n// Multiple permissions check (AND logic)\nexport const requireAllPermissions = (permissions: string[]) => {\n  return (req: ApiKeyRequest, res: Response, next: NextFunction): void => {\n    if (!req.apiKeyPermissions) {\n      res.status(HTTP_STATUS_CODES.UNAUTHORIZED).json({\n        success: false,\n        message: 'API key validation required',\n        code: 'API_KEY_NOT_VALIDATED',\n      });\n      return;\n    }\n\n    // Check if API key has wildcard permission\n    if (req.apiKeyPermissions.includes('*')) {\n      return next();\n    }\n\n    // Check if all required permissions exist\n    const hasAllPermissions = permissions.every(permission => \n      req.apiKeyPermissions!.includes(permission)\n    );\n    \n    if (!hasAllPermissions) {\n      const missingPermissions = permissions.filter(permission => \n        !req.apiKeyPermissions!.includes(permission)\n      );\n      \n      logger.warn('Permission denied (all):', {\n        required: permissions,\n        missing: missingPermissions,\n        available: req.apiKeyPermissions,\n        keyName: req.apiKey?.name,\n        path: req.originalUrl,\n      });\n      \n      res.status(HTTP_STATUS_CODES.FORBIDDEN).json({\n        success: false,\n        message: 'Insufficient API key permissions',\n        code: 'PERMISSION_DENIED',\n        required: permissions,\n        missing: missingPermissions,\n        available: req.apiKeyPermissions,\n      });\n      return;\n    }\n\n    next();\n  };\n};\n\n// API key info endpoint\nexport const getApiKeyInfo = (req: ApiKeyRequest, res: Response): void => {\n  if (!req.apiKey) {\n    res.status(HTTP_STATUS_CODES.UNAUTHORIZED).json({\n      success: false,\n      message: 'API key required',\n      code: 'API_KEY_MISSING',\n    });\n    return;\n  }\n\n  res.json({\n    success: true,\n    data: {\n      name: req.apiKey.name,\n      permissions: req.apiKey.permissions,\n      rateLimit: req.apiKey.rateLimit,\n      isActive: req.apiKey.isActive,\n    },\n  });\n};\n\n// Create API key (admin only)\nexport const createApiKey = (config: Omit<ApiKeyConfig, 'key'>): string => {\n  const apiKey = generateApiKey();\n  \n  API_KEYS[apiKey] = {\n    ...config,\n    key: apiKey,\n  };\n  \n  logger.info('API key created:', {\n    key: apiKey.substring(0, 8) + '...',\n    name: config.name,\n    permissions: config.permissions,\n  });\n  \n  return apiKey;\n};\n\n// Deactivate API key\nexport const deactivateApiKey = (apiKey: string): boolean => {\n  if (API_KEYS[apiKey]) {\n    API_KEYS[apiKey].isActive = false;\n    logger.info('API key deactivated:', {\n      key: apiKey.substring(0, 8) + '...',\n      name: API_KEYS[apiKey].name,\n    });\n    return true;\n  }\n  return false;\n};\n\n// Generate secure API key\nconst generateApiKey = (): string => {\n  const crypto = require('crypto');\n  return crypto.randomBytes(32).toString('hex');\n};\n\n// Get all API keys (admin only)\nexport const getAllApiKeys = (): Omit<ApiKeyConfig, 'key'>[] => {\n  return Object.values(API_KEYS).map(({ key, ...config }) => config);\n};\n\nexport default {\n  validateApiKey,\n  requirePermission,\n  requireAnyPermission,\n  requireAllPermissions,\n  getApiKeyInfo,\n  createApiKey,\n  deactivateApiKey,\n  getAllApiKeys,\n};"