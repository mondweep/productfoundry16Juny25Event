import express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport morgan from 'morgan';\nimport dotenv from 'dotenv';\nimport { createServer } from 'http';\nimport { WebSocketServer } from 'ws';\n\nimport { connectDatabase } from './config/database';\nimport { logger } from './utils/logger';\nimport { errorHandler } from './middleware/errorHandler';\nimport { rateLimiter } from './middleware/rateLimiter';\nimport { authMiddleware } from './middleware/auth';\nimport { validateApiKey } from './middleware/apiKey';\nimport { setupWebSocket } from './services/websocket';\n\n// Import API routes\nimport weatherRoutes from './api/weather';\nimport oceanRoutes from './api/ocean';\nimport trafficRoutes from './api/traffic';\nimport alertsRoutes from './api/alerts';\nimport authRoutes from './api/auth';\nimport userRoutes from './api/users';\nimport favoritesRoutes from './api/favorites';\nimport healthRoutes from './api/health';\n\n// Load environment variables\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\nconst WS_PORT = process.env.WS_PORT || 3002;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      connectSrc: [\"'self'\", 'ws:', 'wss:'],\n    },\n  },\n}));\n\n// CORS configuration\nconst corsOptions = {\n  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',\n  credentials: true,\n  optionsSuccessStatus: 200,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'x-api-key'],\n};\napp.use(cors(corsOptions));\n\n// Compression and parsing middleware\napp.use(compression());\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Logging middleware\nif (process.env.NODE_ENV !== 'test') {\n  app.use(morgan('combined', {\n    stream: { write: (message) => logger.info(message.trim()) }\n  }));\n}\n\n// Rate limiting\napp.use(rateLimiter);\n\n// API key validation for external requests\napp.use('/api', validateApiKey);\n\n// Health check endpoint (before auth)\napp.use('/health', healthRoutes);\n\n// API routes\nconst apiVersion = process.env.API_VERSION || 'v1';\napp.use(`/api/${apiVersion}/auth`, authRoutes);\napp.use(`/api/${apiVersion}/weather`, weatherRoutes);\napp.use(`/api/${apiVersion}/ocean`, oceanRoutes);\napp.use(`/api/${apiVersion}/traffic`, trafficRoutes);\napp.use(`/api/${apiVersion}/alerts`, alertsRoutes);\n\n// Protected routes\napp.use(`/api/${apiVersion}/users`, authMiddleware, userRoutes);\napp.use(`/api/${apiVersion}/favorites`, authMiddleware, favoritesRoutes);\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    message: 'Route not found',\n    path: req.originalUrl,\n  });\n});\n\n// Error handling middleware (must be last)\napp.use(errorHandler);\n\n// Graceful shutdown handler\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM received, shutting down gracefully');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  logger.info('SIGINT received, shutting down gracefully');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\n// Start server\nasync function startServer() {\n  try {\n    // Connect to database\n    await connectDatabase();\n    logger.info('Database connected successfully');\n\n    // Create HTTP server\n    const server = createServer(app);\n    \n    // Setup WebSocket server\n    const wss = new WebSocketServer({ port: WS_PORT });\n    setupWebSocket(wss);\n    \n    // Start HTTP server\n    server.listen(PORT, () => {\n      logger.info(`🚀 Server running on http://localhost:${PORT}`);\n      logger.info(`📡 WebSocket server running on ws://localhost:${WS_PORT}`);\n      logger.info(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\n      logger.info(`📋 API Version: ${apiVersion}`);\n    });\n\n    return server;\n  } catch (error) {\n    logger.error('Failed to start server:', error);\n    process.exit(1);\n  }\n}\n\n// Start the server if this file is run directly\nif (require.main === module) {\n  startServer();\n}\n\nexport { app, startServer };"