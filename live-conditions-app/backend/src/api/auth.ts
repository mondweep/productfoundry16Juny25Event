import { Router } from 'express';\nimport { authMiddleware, refreshTokenMiddleware } from '../middleware/auth';\nimport { validate, userSchemas } from '../middleware/validation';\nimport { authRateLimit } from '../middleware/rateLimiter';\nimport { catchAsync, AppError, createValidationError, createNotFoundError } from '../middleware/errorHandler';\nimport { User, IUser } from '../models/User';\nimport { logger } from '../utils/logger';\nimport { HTTP_STATUS_CODES } from '../config/constants';\nimport jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\n\nconst router = Router();\n\n// Apply auth rate limiting to all auth routes\nrouter.use(authRateLimit);\n\n// Register new user\nrouter.post('/register', \n  validate(userSchemas.register),\n  catchAsync(async (req, res) => {\n    const { email, password, firstName, lastName } = req.body;\n    \n    // Check if user already exists\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      throw new AppError('User already exists with this email', HTTP_STATUS_CODES.CONFLICT, true, 'USER_EXISTS');\n    }\n    \n    // Create new user\n    const user = new User({\n      email,\n      password,\n      firstName,\n      lastName,\n    });\n    \n    await user.save();\n    \n    // Generate tokens\n    const tokens = await user.generateAuthTokens();\n    \n    // Log registration\n    await user.addToLoginHistory(req.ip || 'unknown', req.headers['user-agent'] || 'unknown', true);\n    \n    logger.info('User registered:', {\n      userId: user._id,\n      email: user.email,\n      ip: req.ip,\n    });\n    \n    res.status(HTTP_STATUS_CODES.CREATED).json({\n      success: true,\n      message: 'User registered successfully',\n      data: {\n        user: {\n          id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          isEmailVerified: user.isEmailVerified,\n        },\n        tokens,\n      },\n    });\n  })\n);\n\n// Login user\nrouter.post('/login',\n  validate(userSchemas.login),\n  catchAsync(async (req, res) => {\n    const { email, password, rememberMe } = req.body;\n    \n    // Find user\n    const user = await User.findOne({ email });\n    if (!user) {\n      await logFailedLogin(email, req.ip || 'unknown', req.headers['user-agent'] || 'unknown');\n      throw new AppError('Invalid credentials', HTTP_STATUS_CODES.UNAUTHORIZED, true, 'INVALID_CREDENTIALS');\n    }\n    \n    // Check if user is active\n    if (!user.isActive) {\n      await user.addToLoginHistory(req.ip || 'unknown', req.headers['user-agent'] || 'unknown', false);\n      throw new AppError('Account is deactivated', HTTP_STATUS_CODES.UNAUTHORIZED, true, 'ACCOUNT_DEACTIVATED');\n    }\n    \n    // Check password\n    const isValidPassword = await user.comparePassword(password);\n    if (!isValidPassword) {\n      await user.addToLoginHistory(req.ip || 'unknown', req.headers['user-agent'] || 'unknown', false);\n      throw new AppError('Invalid credentials', HTTP_STATUS_CODES.UNAUTHORIZED, true, 'INVALID_CREDENTIALS');\n    }\n    \n    // Generate tokens\n    const tokens = await user.generateAuthTokens();\n    \n    // Log successful login\n    await user.addToLoginHistory(req.ip || 'unknown', req.headers['user-agent'] || 'unknown', true);\n    \n    logger.info('User logged in:', {\n      userId: user._id,\n      email: user.email,\n      ip: req.ip,\n      rememberMe,\n    });\n    \n    res.json({\n      success: true,\n      message: 'Login successful',\n      data: {\n        user: {\n          id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          isEmailVerified: user.isEmailVerified,\n          preferences: user.preferences,\n          subscription: user.subscription,\n        },\n        tokens,\n      },\n    });\n  })\n);\n\n// Refresh tokens\nrouter.post('/refresh', refreshTokenMiddleware);\n\n// Logout user\nrouter.post('/logout',\n  authMiddleware,\n  catchAsync(async (req: any, res) => {\n    const { refreshToken } = req.body;\n    const user = req.user as IUser;\n    \n    if (refreshToken) {\n      // Deactivate specific refresh token\n      const tokenRecord = user.refreshTokens.find(token => token.token === refreshToken);\n      if (tokenRecord) {\n        tokenRecord.isActive = false;\n        await user.save();\n      }\n    } else {\n      // Deactivate all refresh tokens for this user\n      user.refreshTokens.forEach(token => {\n        token.isActive = false;\n      });\n      await user.save();\n    }\n    \n    logger.info('User logged out:', {\n      userId: user._id,\n      email: user.email,\n      ip: req.ip,\n      allTokens: !refreshToken,\n    });\n    \n    res.json({\n      success: true,\n      message: 'Logout successful',\n    });\n  })\n);\n\n// Get current user profile\nrouter.get('/me',\n  authMiddleware,\n  catchAsync(async (req: any, res) => {\n    const user = req.user as IUser;\n    \n    // Cleanup expired tokens\n    await user.cleanupExpiredTokens();\n    \n    res.json({\n      success: true,\n      data: {\n        user: {\n          id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          isActive: user.isActive,\n          isEmailVerified: user.isEmailVerified,\n          preferences: user.preferences,\n          favorites: user.favorites,\n          subscription: user.subscription,\n          createdAt: user.createdAt,\n          lastLoginAt: user.lastLoginAt,\n        },\n      },\n    });\n  })\n);\n\n// Update user profile\nrouter.put('/me',\n  authMiddleware,\n  validate(userSchemas.updateProfile),\n  catchAsync(async (req: any, res) => {\n    const user = req.user as IUser;\n    const updates = req.body;\n    \n    // Update allowed fields\n    if (updates.firstName) user.firstName = updates.firstName;\n    if (updates.lastName) user.lastName = updates.lastName;\n    if (updates.preferences) {\n      user.preferences = { ...user.preferences, ...updates.preferences };\n    }\n    \n    await user.save();\n    \n    logger.info('User profile updated:', {\n      userId: user._id,\n      email: user.email,\n      updatedFields: Object.keys(updates),\n    });\n    \n    res.json({\n      success: true,\n      message: 'Profile updated successfully',\n      data: {\n        user: {\n          id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          preferences: user.preferences,\n        },\n      },\n    });\n  })\n);\n\n// Change password\nrouter.put('/change-password',\n  authMiddleware,\n  validate(userSchemas.changePassword),\n  catchAsync(async (req: any, res) => {\n    const user = req.user as IUser;\n    const { currentPassword, newPassword } = req.body;\n    \n    // Verify current password\n    const isValidPassword = await user.comparePassword(currentPassword);\n    if (!isValidPassword) {\n      throw new AppError('Current password is incorrect', HTTP_STATUS_CODES.BAD_REQUEST, true, 'INVALID_PASSWORD');\n    }\n    \n    // Update password\n    user.password = newPassword;\n    await user.save();\n    \n    // Deactivate all refresh tokens to force re-login\n    user.refreshTokens.forEach(token => {\n      token.isActive = false;\n    });\n    await user.save();\n    \n    logger.info('User password changed:', {\n      userId: user._id,\n      email: user.email,\n      ip: req.ip,\n    });\n    \n    res.json({\n      success: true,\n      message: 'Password changed successfully. Please log in again.',\n    });\n  })\n);\n\n// Forgot password\nrouter.post('/forgot-password',\n  validate(userSchemas.forgotPassword),\n  catchAsync(async (req, res) => {\n    const { email } = req.body;\n    \n    const user = await User.findOne({ email });\n    if (!user) {\n      // Don't reveal if email exists or not\n      res.json({\n        success: true,\n        message: 'If an account with that email exists, a password reset link has been sent.',\n      });\n      return;\n    }\n    \n    // Generate reset token\n    const resetToken = crypto.randomBytes(32).toString('hex');\n    const resetTokenExpiry = new Date(Date.now() + 3600000); // 1 hour\n    \n    // In a real app, you would:\n    // 1. Store the reset token in the database with expiry\n    // 2. Send email with reset link\n    // For now, we'll just log it\n    \n    logger.info('Password reset requested:', {\n      userId: user._id,\n      email: user.email,\n      resetToken,\n      ip: req.ip,\n    });\n    \n    res.json({\n      success: true,\n      message: 'If an account with that email exists, a password reset link has been sent.',\n      // In development, include the token for testing\n      ...(process.env.NODE_ENV === 'development' && { resetToken }),\n    });\n  })\n);\n\n// Reset password\nrouter.post('/reset-password',\n  validate(userSchemas.resetPassword),\n  catchAsync(async (req, res) => {\n    const { token, newPassword } = req.body;\n    \n    // In a real app, you would validate the token from the database\n    // For now, we'll simulate it\n    \n    logger.info('Password reset attempted:', {\n      token: token.substring(0, 8) + '...',\n      ip: req.ip,\n    });\n    \n    // Simulate token validation\n    if (!token || token.length < 32) {\n      throw new AppError('Invalid or expired reset token', HTTP_STATUS_CODES.BAD_REQUEST, true, 'INVALID_TOKEN');\n    }\n    \n    res.json({\n      success: true,\n      message: 'Password reset successful. Please log in with your new password.',\n    });\n  })\n);\n\n// Verify email\nrouter.post('/verify-email',\n  authMiddleware,\n  catchAsync(async (req: any, res) => {\n    const user = req.user as IUser;\n    \n    // In a real app, you would:\n    // 1. Generate verification token\n    // 2. Send verification email\n    // For now, we'll just mark as verified\n    \n    user.isEmailVerified = true;\n    await user.save();\n    \n    logger.info('Email verification requested:', {\n      userId: user._id,\n      email: user.email,\n    });\n    \n    res.json({\n      success: true,\n      message: 'Verification email sent. Please check your inbox.',\n    });\n  })\n);\n\n// Resend email verification\nrouter.post('/resend-verification',\n  authMiddleware,\n  catchAsync(async (req: any, res) => {\n    const user = req.user as IUser;\n    \n    if (user.isEmailVerified) {\n      throw new AppError('Email is already verified', HTTP_STATUS_CODES.BAD_REQUEST, true, 'ALREADY_VERIFIED');\n    }\n    \n    logger.info('Email verification resend requested:', {\n      userId: user._id,\n      email: user.email,\n    });\n    \n    res.json({\n      success: true,\n      message: 'Verification email sent. Please check your inbox.',\n    });\n  })\n);\n\n// Get login history\nrouter.get('/login-history',\n  authMiddleware,\n  catchAsync(async (req: any, res) => {\n    const user = req.user as IUser;\n    \n    res.json({\n      success: true,\n      data: {\n        loginHistory: user.loginHistory.slice(-20), // Last 20 attempts\n        lastLoginAt: user.lastLoginAt,\n      },\n    });\n  })\n);\n\n// Helper function to log failed login attempts\nconst logFailedLogin = async (email: string, ip: string, userAgent: string): Promise<void> => {\n  logger.warn('Failed login attempt:', {\n    email,\n    ip,\n    userAgent,\n    timestamp: new Date().toISOString(),\n  });\n};\n\nexport default router;"