import { Router } from 'express';\nimport { validate, favoritesSchemas, commonSchemas } from '../middleware/validation';\nimport { catchAsync, AppError, createNotFoundError } from '../middleware/errorHandler';\nimport { User } from '../models/User';\nimport { logger } from '../utils/logger';\nimport { HTTP_STATUS_CODES } from '../config/constants';\n\nconst router = Router();\n\n// Get user's favorite locations\nrouter.get('/locations',\n  catchAsync(async (req: any, res) => {\n    const user = req.user;\n    \n    res.json({\n      success: true,\n      data: {\n        locations: user.favorites.locations,\n        total: user.favorites.locations.length,\n      },\n    });\n  })\n);\n\n// Add favorite location\nrouter.post('/locations',\n  validate(favoritesSchemas.addLocation),\n  catchAsync(async (req: any, res) => {\n    const user = req.user;\n    const locationData = req.body;\n    \n    // Check if location already exists\n    const existingLocation = user.favorites.locations.find(\n      (loc: any) => \n        Math.abs(loc.latitude - locationData.latitude) < 0.001 &&\n        Math.abs(loc.longitude - locationData.longitude) < 0.001\n    );\n    \n    if (existingLocation) {\n      throw new AppError(\n        'Location already in favorites',\n        HTTP_STATUS_CODES.CONFLICT,\n        true,\n        'LOCATION_EXISTS'\n      );\n    }\n    \n    // Add location\n    user.favorites.locations.push({\n      ...locationData,\n      createdAt: new Date(),\n    });\n    \n    await user.save();\n    \n    logger.info('Favorite location added:', {\n      userId: user._id,\n      location: locationData.name,\n      coordinates: `${locationData.latitude},${locationData.longitude}`,\n    });\n    \n    res.status(HTTP_STATUS_CODES.CREATED).json({\n      success: true,\n      message: 'Location added to favorites',\n      data: {\n        location: user.favorites.locations[user.favorites.locations.length - 1],\n      },\n    });\n  })\n);\n\n// Update favorite location\nrouter.put('/locations/:locationId',\n  validate(favoritesSchemas.updateLocation),\n  catchAsync(async (req: any, res) => {\n    const user = req.user;\n    const { locationId } = req.params;\n    const updates = req.body;\n    \n    const location = user.favorites.locations.id(locationId);\n    if (!location) {\n      throw createNotFoundError('Favorite location');\n    }\n    \n    // Update fields\n    if (updates.name) location.name = updates.name;\n    if (updates.type) location.type = updates.type;\n    \n    await user.save();\n    \n    logger.info('Favorite location updated:', {\n      userId: user._id,\n      locationId,\n      updates: Object.keys(updates),\n    });\n    \n    res.json({\n      success: true,\n      message: 'Favorite location updated',\n      data: { location },\n    });\n  })\n);\n\n// Remove favorite location\nrouter.delete('/locations/:locationId',\n  catchAsync(async (req: any, res) => {\n    const user = req.user;\n    const { locationId } = req.params;\n    \n    const location = user.favorites.locations.id(locationId);\n    if (!location) {\n      throw createNotFoundError('Favorite location');\n    }\n    \n    location.deleteOne();\n    await user.save();\n    \n    logger.info('Favorite location removed:', {\n      userId: user._id,\n      locationId,\n      locationName: location.name,\n    });\n    \n    res.json({\n      success: true,\n      message: 'Location removed from favorites',\n    });\n  })\n);\n\n// Get user's favorite alerts\nrouter.get('/alerts',\n  catchAsync(async (req: any, res) => {\n    const user = req.user;\n    \n    res.json({\n      success: true,\n      data: {\n        alerts: user.favorites.alerts,\n        total: user.favorites.alerts.length,\n      },\n    });\n  })\n);\n\n// Add favorite alert\nrouter.post('/alerts',\n  validate(favoritesSchemas.addAlert),\n  catchAsync(async (req: any, res) => {\n    const user = req.user;\n    const alertData = req.body;\n    \n    // Add alert\n    user.favorites.alerts.push({\n      ...alertData,\n      createdAt: new Date(),\n    });\n    \n    await user.save();\n    \n    logger.info('Favorite alert added:', {\n      userId: user._id,\n      alertType: alertData.type,\n      location: alertData.location,\n    });\n    \n    res.status(HTTP_STATUS_CODES.CREATED).json({\n      success: true,\n      message: 'Alert added to favorites',\n      data: {\n        alert: user.favorites.alerts[user.favorites.alerts.length - 1],\n      },\n    });\n  })\n);\n\n// Remove favorite alert\nrouter.delete('/alerts/:alertId',\n  catchAsync(async (req: any, res) => {\n    const user = req.user;\n    const { alertId } = req.params;\n    \n    const alert = user.favorites.alerts.id(alertId);\n    if (!alert) {\n      throw createNotFoundError('Favorite alert');\n    }\n    \n    alert.deleteOne();\n    await user.save();\n    \n    logger.info('Favorite alert removed:', {\n      userId: user._id,\n      alertId,\n      alertType: alert.type,\n    });\n    \n    res.json({\n      success: true,\n      message: 'Alert removed from favorites',\n    });\n  })\n);\n\nexport default router;"