import { Router } from 'express';\nimport { requireRole, requireSelfOrAdmin } from '../middleware/auth';\nimport { validate, userSchemas } from '../middleware/validation';\nimport { catchAsync, createNotFoundError } from '../middleware/errorHandler';\nimport { User } from '../models/User';\nimport { logger } from '../utils/logger';\nimport { HTTP_STATUS_CODES } from '../config/constants';\n\nconst router = Router();\n\n// Get user by ID (self or admin)\nrouter.get('/:userId',\n  requireSelfOrAdmin(),\n  catchAsync(async (req: any, res) => {\n    const { userId } = req.params;\n    \n    const user = await User.findById(userId).select('-password -refreshTokens');\n    if (!user) {\n      throw createNotFoundError('User');\n    }\n    \n    res.json({\n      success: true,\n      data: { user },\n    });\n  })\n);\n\n// Update user (self or admin)\nrouter.put('/:userId',\n  requireSelfOrAdmin(),\n  validate(userSchemas.updateProfile),\n  catchAsync(async (req: any, res) => {\n    const { userId } = req.params;\n    const updates = req.body;\n    const currentUser = req.user;\n    \n    const user = await User.findById(userId);\n    if (!user) {\n      throw createNotFoundError('User');\n    }\n    \n    // Update allowed fields\n    if (updates.firstName) user.firstName = updates.firstName;\n    if (updates.lastName) user.lastName = updates.lastName;\n    if (updates.preferences) {\n      user.preferences = { ...user.preferences, ...updates.preferences };\n    }\n    \n    await user.save();\n    \n    logger.info('User updated:', {\n      userId: user._id,\n      updatedBy: currentUser._id,\n      updatedFields: Object.keys(updates),\n    });\n    \n    res.json({\n      success: true,\n      message: 'User updated successfully',\n      data: {\n        user: {\n          id: user._id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          preferences: user.preferences,\n        },\n      },\n    });\n  })\n);\n\n// Delete user (self or admin)\nrouter.delete('/:userId',\n  requireSelfOrAdmin(),\n  catchAsync(async (req: any, res) => {\n    const { userId } = req.params;\n    const currentUser = req.user;\n    \n    const user = await User.findById(userId);\n    if (!user) {\n      throw createNotFoundError('User');\n    }\n    \n    // Deactivate instead of hard delete\n    user.isActive = false;\n    await user.save();\n    \n    logger.info('User deactivated:', {\n      userId: user._id,\n      deactivatedBy: currentUser._id,\n    });\n    \n    res.json({\n      success: true,\n      message: 'User account deactivated successfully',\n    });\n  })\n);\n\n// Admin-only routes\nrouter.use(requireRole(['admin']));\n\n// Get all users (admin only)\nrouter.get('/',\n  catchAsync(async (req: any, res) => {\n    const {\n      page = 1,\n      limit = 20,\n      sort = '-createdAt',\n      search,\n      role,\n      isActive,\n    } = req.query;\n    \n    // Build query\n    const query: any = {};\n    \n    if (search) {\n      query.$or = [\n        { email: { $regex: search, $options: 'i' } },\n        { firstName: { $regex: search, $options: 'i' } },\n        { lastName: { $regex: search, $options: 'i' } },\n      ];\n    }\n    \n    if (role) {\n      query.role = role;\n    }\n    \n    if (isActive !== undefined) {\n      query.isActive = isActive === 'true';\n    }\n    \n    const skip = (parseInt(page) - 1) * parseInt(limit);\n    \n    const [users, total] = await Promise.all([\n      User.find(query)\n        .select('-password -refreshTokens')\n        .sort(sort)\n        .skip(skip)\n        .limit(parseInt(limit))\n        .lean(),\n      User.countDocuments(query),\n    ]);\n    \n    logger.info('Users fetched:', {\n      query,\n      total,\n      page,\n      limit,\n      adminId: req.user._id,\n    });\n    \n    res.json({\n      success: true,\n      data: {\n        users,\n        total,\n        page: parseInt(page),\n        limit: parseInt(limit),\n        pages: Math.ceil(total / parseInt(limit)),\n      },\n    });\n  })\n);\n\nexport default router;"