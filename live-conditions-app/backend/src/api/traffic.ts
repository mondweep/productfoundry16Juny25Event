import { Router } from 'express';\nimport { optionalAuthMiddleware } from '../middleware/auth';\nimport { requirePermission } from '../middleware/apiKey';\nimport { validate, trafficSchemas } from '../middleware/validation';\nimport { catchAsync } from '../middleware/errorHandler';\nimport { cacheService } from '../services/cache';\nimport { logger } from '../utils/logger';\n\nconst router = Router();\n\n// Apply optional auth to all traffic routes\nrouter.use(optionalAuthMiddleware);\n\n// Apply permission check for traffic data\nrouter.use(requirePermission('traffic:read'));\n\n// Get current traffic conditions\nrouter.get('/conditions',\n  validate(trafficSchemas.getTrafficConditions, 'query'),\n  catchAsync(async (req: any, res) => {\n    const { latitude, longitude, radius, include } = req.query;\n    const userId = req.userId;\n    \n    // Mock traffic conditions data\n    const trafficData = {\n      location: {\n        latitude: parseFloat(latitude),\n        longitude: parseFloat(longitude),\n        radius: parseFloat(radius),\n      },\n      incidents: [\n        {\n          id: 'incident_1',\n          type: 'accident',\n          severity: 'medium',\n          description: 'Vehicle breakdown in left lane',\n          location: {\n            latitude: parseFloat(latitude) + 0.001,\n            longitude: parseFloat(longitude) + 0.001,\n            road: 'State Highway 1',\n            direction: 'Northbound',\n          },\n          startTime: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n          estimatedClearance: new Date(Date.now() + 15 * 60 * 1000).toISOString(),\n          impact: {\n            delayMinutes: 15,\n            affectedLanes: 1,\n            totalLanes: 3,\n          },\n        },\n        {\n          id: 'incident_2',\n          type: 'roadwork',\n          severity: 'low',\n          description: 'Lane closure for maintenance',\n          location: {\n            latitude: parseFloat(latitude) - 0.002,\n            longitude: parseFloat(longitude) - 0.001,\n            road: 'Queen Street',\n            direction: 'Both directions',\n          },\n          startTime: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n          estimatedClearance: new Date(Date.now() + 4 * 60 * 60 * 1000).toISOString(),\n          impact: {\n            delayMinutes: 5,\n            affectedLanes: 1,\n            totalLanes: 2,\n          },\n        },\n      ],\n      congestion: {\n        overall: 'moderate',\n        areas: [\n          {\n            road: 'State Highway 1',\n            section: 'CBD to Airport',\n            level: 'heavy',\n            averageSpeed: 25,\n            normalSpeed: 60,\n            delayMinutes: 20,\n          },\n          {\n            road: 'Queen Street',\n            section: 'Mayoral Drive to Quay Street',\n            level: 'light',\n            averageSpeed: 45,\n            normalSpeed: 50,\n            delayMinutes: 2,\n          },\n        ],\n      },\n      lastUpdated: new Date().toISOString(),\n    };\n    \n    logger.info('Traffic conditions requested:', {\n      latitude,\n      longitude,\n      radius,\n      include,\n      userId,\n    });\n    \n    res.json({\n      success: true,\n      data: trafficData,\n      meta: {\n        location: {\n          latitude: parseFloat(latitude),\n          longitude: parseFloat(longitude),\n          radius: parseFloat(radius),\n        },\n        timestamp: new Date().toISOString(),\n      },\n    });\n  })\n);\n\n// Get route information with traffic\nrouter.get('/route',\n  validate(trafficSchemas.getRoute, 'query'),\n  catchAsync(async (req: any, res) => {\n    const { origin, destination, waypoints, mode, avoid } = req.query;\n    const userId = req.userId;\n    \n    // Mock route data with traffic\n    const routeData = {\n      origin: {\n        latitude: parseFloat(origin.latitude),\n        longitude: parseFloat(origin.longitude),\n      },\n      destination: {\n        latitude: parseFloat(destination.latitude),\n        longitude: parseFloat(destination.longitude),\n      },\n      routes: [\n        {\n          id: 'route_1',\n          summary: 'Fastest route',\n          distance: {\n            value: 15420,\n            text: '15.4 km',\n          },\n          duration: {\n            value: 1200,\n            text: '20 minutes',\n            inTraffic: 1800,\n            textInTraffic: '30 minutes',\n          },\n          trafficConditions: {\n            overall: 'moderate',\n            delays: [\n              {\n                location: 'State Highway 1',\n                delayMinutes: 10,\n                reason: 'Heavy traffic',\n              },\n            ],\n          },\n          polyline: 'encoded_polyline_data',\n          steps: [\n            {\n              instruction: 'Head north on Queen Street',\n              distance: { value: 500, text: '500 m' },\n              duration: { value: 120, text: '2 minutes' },\n            },\n            {\n              instruction: 'Turn right onto State Highway 1',\n              distance: { value: 12000, text: '12 km' },\n              duration: { value: 900, text: '15 minutes' },\n            },\n            {\n              instruction: 'Take exit 5 toward Airport',\n              distance: { value: 2920, text: '2.9 km' },\n              duration: { value: 180, text: '3 minutes' },\n            },\n          ],\n        },\n        {\n          id: 'route_2',\n          summary: 'Alternative route',\n          distance: {\n            value: 17800,\n            text: '17.8 km',\n          },\n          duration: {\n            value: 1320,\n            text: '22 minutes',\n            inTraffic: 1500,\n            textInTraffic: '25 minutes',\n          },\n          trafficConditions: {\n            overall: 'light',\n            delays: [],\n          },\n          polyline: 'encoded_polyline_data_alt',\n          steps: [\n            {\n              instruction: 'Head east on Customs Street',\n              distance: { value: 800, text: '800 m' },\n              duration: { value: 180, text: '3 minutes' },\n            },\n            {\n              instruction: 'Continue on Tamaki Drive',\n              distance: { value: 15000, text: '15 km' },\n              duration: { value: 1020, text: '17 minutes' },\n            },\n            {\n              instruction: 'Turn left toward Airport',\n              distance: { value: 2000, text: '2 km' },\n              duration: { value: 120, text: '2 minutes' },\n            },\n          ],\n        },\n      ],\n      lastUpdated: new Date().toISOString(),\n    };\n    \n    logger.info('Route requested:', {\n      origin,\n      destination,\n      waypoints,\n      mode,\n      avoid,\n      userId,\n    });\n    \n    res.json({\n      success: true,\n      data: routeData,\n      meta: {\n        origin,\n        destination,\n        mode,\n        avoid,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  })\n);\n\nexport default router;"